package test_heap_intramethod;

//
// Simple propagation / statement reduction
//
scenario HeapObjectResidualization {
	?Box@1 a;
	?a = ?new Box@1(dynamic(int,input));
	?int b;
	?b = ?a.value;
} assert {
	Box@1 a; a = new Box@1(dynamic(int,input));
	int b; b = a.value;
}

scenario HeapSimplePropagation {
	$Box@2 a;
	$a = $new Box@2(87);
	?int b;
	?b = lift($a.value);
} assert {
	int b; b = 87;
}

scenario HeapSimpleUpdate {
	$Box@2 a;
	$a = $new Box@2(87);
	$a.value = ($a.value) $+ 1;
	?int b;
	?b = lift($a.value);
} assert {
	int b; b = 88;	
}

//
// Speculative evaluation
//
scenario HeapDynamicConditional {
	$Box@2 a;
	$a = $new Box@2(87);
	?int b;
	if(dynamic(int,input)) {
		$a.value = ($a.value) $+ 1;
		?b = lift($a.value);		
	} else {
		$a.value = ($a.value) $- 1;
		?b = lift($a.value);
	}
} assert {
	int b;
	if(dynamic(int,input)) {
		b = 88;
	} else {
		b = 86;
	}
}

scenario HeapNestedDynamicConditional {
	$Box@2 x; $x = $new Box@2(87);
	$x.value = 1;
	?int y; ?y = dynamic(int,input1);
	?int z; ?z = dynamic(int,input2);
	?if(?y) {
		?if(?z) {
			?y = lift(($x.value)$+1);
			$x.value = ($x.value) $+ 10;
			?z = lift(($x.value)$+($x.value));
		} else {
			?y = lift(($x.value)$+2);
			$x.value = ($x.value) $+ 20;
			?z = lift(($x.value)$+($x.value));
		}
	} else {
		?if(?z) {
			?y = lift(($x.value)$+3);
			$x.value = ($x.value) $+ 30;
			?z = lift(($x.value)$+($x.value));
		} else {
			?y = lift(($x.value)$+4);
			$x.value = ($x.value) $+ 40;
			?z = lift(($x.value)$+($x.value));
		}
	}
} assert {
	int y; y = dynamic(int,input1);
	int z; z = dynamic(int,input2);
	if(y) {
		if(z) {
			y = 2;
			z = 22;
		} else {
			y = 3;
			z = 42;
		}
	} else {
		if(z) {
			y = 4;
			z = 62;
		} else {
			y = 5;
			z = 82;
		}
	}
}

//
// Heap values
// 
class Box@1 extends Object { // Dynamic variant
	int value;
}

class Box@2 extends Object { // Static variant
	$int value;
}

//
// Auxiliary declarations
//

primitive int;
