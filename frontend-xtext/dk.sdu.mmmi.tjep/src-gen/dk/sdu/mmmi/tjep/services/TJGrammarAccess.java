/*
* generated by Xtext
*/

package dk.sdu.mmmi.tjep.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class TJGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPkgnameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPkgnameIDTerminalRuleCall_1_0 = (RuleCall)cPkgnameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cScenariosAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cScenariosScenarioParserRuleCall_3_0 = (RuleCall)cScenariosAssignment_3.eContents().get(0);
		private final Assignment cTypesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypesTypeParserRuleCall_4_0 = (RuleCall)cTypesAssignment_4.eContents().get(0);
		
		//Program:
		//	"package" pkgname=ID ";" scenarios+=Scenario* types+=Type*;
		public ParserRule getRule() { return rule; }

		//"package" pkgname=ID ";" scenarios+=Scenario* types+=Type*
		public Group getGroup() { return cGroup; }

		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }

		//pkgname=ID
		public Assignment getPkgnameAssignment_1() { return cPkgnameAssignment_1; }

		//ID
		public RuleCall getPkgnameIDTerminalRuleCall_1_0() { return cPkgnameIDTerminalRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }

		//scenarios+=Scenario*
		public Assignment getScenariosAssignment_3() { return cScenariosAssignment_3; }

		//Scenario
		public RuleCall getScenariosScenarioParserRuleCall_3_0() { return cScenariosScenarioParserRuleCall_3_0; }

		//types+=Type*
		public Assignment getTypesAssignment_4() { return cTypesAssignment_4; }

		//Type
		public RuleCall getTypesTypeParserRuleCall_4_0() { return cTypesTypeParserRuleCall_4_0; }
	}

	public class ScenarioElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Scenario");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScenarioKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTargetAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTargetStatementParserRuleCall_3_0 = (RuleCall)cTargetAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cAssertKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cAssertionAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cAssertionStatementParserRuleCall_5_2_0 = (RuleCall)cAssertionAssignment_5_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		
		//Scenario:
		//	"scenario" name=ID "{" target+=Statement* "}" ("assert" "{" assertion+=Statement* "}")?;
		public ParserRule getRule() { return rule; }

		//"scenario" name=ID "{" target+=Statement* "}" ("assert" "{" assertion+=Statement* "}")?
		public Group getGroup() { return cGroup; }

		//"scenario"
		public Keyword getScenarioKeyword_0() { return cScenarioKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//target+=Statement*
		public Assignment getTargetAssignment_3() { return cTargetAssignment_3; }

		//Statement
		public RuleCall getTargetStatementParserRuleCall_3_0() { return cTargetStatementParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }

		//("assert" "{" assertion+=Statement* "}")?
		public Group getGroup_5() { return cGroup_5; }

		//"assert"
		public Keyword getAssertKeyword_5_0() { return cAssertKeyword_5_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5_1() { return cLeftCurlyBracketKeyword_5_1; }

		//assertion+=Statement*
		public Assignment getAssertionAssignment_5_2() { return cAssertionAssignment_5_2; }

		//Statement
		public RuleCall getAssertionStatementParserRuleCall_5_2_0() { return cAssertionStatementParserRuleCall_5_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5_3() { return cRightCurlyBracketKeyword_5_3; }
	}

	public class BTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BT");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cStaticAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cDollarSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cDynamicAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//BT:
		//	{Static} "$" | {Dynamic} "?";
		public ParserRule getRule() { return rule; }

		//{Static} "$" | {Dynamic} "?"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{Static} "$"
		public Group getGroup_0() { return cGroup_0; }

		//{Static}
		public Action getStaticAction_0_0() { return cStaticAction_0_0; }

		//"$"
		public Keyword getDollarSignKeyword_0_1() { return cDollarSignKeyword_0_1; }

		//{Dynamic} "?"
		public Group getGroup_1() { return cGroup_1; }

		//{Dynamic}
		public Action getDynamicAction_1_0() { return cDynamicAction_1_0; }

		//"?"
		public Keyword getQuestionMarkKeyword_1_1() { return cQuestionMarkKeyword_1_1; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimitiveParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cClazzParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Type:
		//	Primitive | Clazz;
		public ParserRule getRule() { return rule; }

		//Primitive | Clazz
		public Alternatives getAlternatives() { return cAlternatives; }

		//Primitive
		public RuleCall getPrimitiveParserRuleCall_0() { return cPrimitiveParserRuleCall_0; }

		//Clazz
		public RuleCall getClazzParserRuleCall_1() { return cClazzParserRuleCall_1; }
	}

	public class PrimitiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Primitive");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrimitiveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Primitive:
		//	"primitive" name=ID ";";
		public ParserRule getRule() { return rule; }

		//"primitive" name=ID ";"
		public Group getGroup() { return cGroup; }

		//"primitive"
		public Keyword getPrimitiveKeyword_0() { return cPrimitiveKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class ClazzElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Clazz");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommercialAtKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cVariantAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cVariantINTTerminalRuleCall_2_1_0 = (RuleCall)cVariantAssignment_2_1.eContents().get(0);
		private final Keyword cExtendsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBaseAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cBaseClazzCrossReference_4_0 = (CrossReference)cBaseAssignment_4.eContents().get(0);
		private final RuleCall cBaseClazzIDTerminalRuleCall_4_0_1 = (RuleCall)cBaseClazzCrossReference_4_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cMembersAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cMembersMemberParserRuleCall_6_0 = (RuleCall)cMembersAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Clazz:
		//	"class" name=ID ("@" variant=INT)? "extends" base=[Clazz] "{" members+=Member* "}";
		public ParserRule getRule() { return rule; }

		//"class" name=ID ("@" variant=INT)? "extends" base=[Clazz] "{" members+=Member* "}"
		public Group getGroup() { return cGroup; }

		//"class"
		public Keyword getClassKeyword_0() { return cClassKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("@" variant=INT)?
		public Group getGroup_2() { return cGroup_2; }

		//"@"
		public Keyword getCommercialAtKeyword_2_0() { return cCommercialAtKeyword_2_0; }

		//variant=INT
		public Assignment getVariantAssignment_2_1() { return cVariantAssignment_2_1; }

		//INT
		public RuleCall getVariantINTTerminalRuleCall_2_1_0() { return cVariantINTTerminalRuleCall_2_1_0; }

		//"extends"
		public Keyword getExtendsKeyword_3() { return cExtendsKeyword_3; }

		//base=[Clazz]
		public Assignment getBaseAssignment_4() { return cBaseAssignment_4; }

		//[Clazz]
		public CrossReference getBaseClazzCrossReference_4_0() { return cBaseClazzCrossReference_4_0; }

		//ID
		public RuleCall getBaseClazzIDTerminalRuleCall_4_0_1() { return cBaseClazzIDTerminalRuleCall_4_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//members+=Member*
		public Assignment getMembersAssignment_6() { return cMembersAssignment_6; }

		//Member
		public RuleCall getMembersMemberParserRuleCall_6_0() { return cMembersMemberParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class MemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Member");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFieldParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMethodParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cConstructorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Member:
		//	Field | Method | Constructor;
		public ParserRule getRule() { return rule; }

		//Field | Method | Constructor
		public Alternatives getAlternatives() { return cAlternatives; }

		//Field
		public RuleCall getFieldParserRuleCall_0() { return cFieldParserRuleCall_0; }

		//Method
		public RuleCall getMethodParserRuleCall_1() { return cMethodParserRuleCall_1; }

		//Constructor
		public RuleCall getConstructorParserRuleCall_2() { return cConstructorParserRuleCall_2; }
	}

	public class FieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Field");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBtAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cBtBTParserRuleCall_0_0 = (RuleCall)cBtAssignment_0.eContents().get(0);
		private final Assignment cFinalAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cFinalFinalKeyword_1_0 = (Keyword)cFinalAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeTypeCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeTypeIDTerminalRuleCall_2_0_1 = (RuleCall)cTypeTypeCrossReference_2_0.eContents().get(1);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Field:
		//	bt=BT? final?="final"? type=[Type] name=ID ";";
		public ParserRule getRule() { return rule; }

		//bt=BT? final?="final"? type=[Type] name=ID ";"
		public Group getGroup() { return cGroup; }

		//bt=BT?
		public Assignment getBtAssignment_0() { return cBtAssignment_0; }

		//BT
		public RuleCall getBtBTParserRuleCall_0_0() { return cBtBTParserRuleCall_0_0; }

		//final?="final"?
		public Assignment getFinalAssignment_1() { return cFinalAssignment_1; }

		//"final"
		public Keyword getFinalFinalKeyword_1_0() { return cFinalFinalKeyword_1_0; }

		//type=[Type]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//[Type]
		public CrossReference getTypeTypeCrossReference_2_0() { return cTypeTypeCrossReference_2_0; }

		//ID
		public RuleCall getTypeTypeIDTerminalRuleCall_2_0_1() { return cTypeTypeIDTerminalRuleCall_2_0_1; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class MethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Method");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBtAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cBtBTParserRuleCall_0_0 = (RuleCall)cBtAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeTypeCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeTypeIDTerminalRuleCall_1_0_1 = (RuleCall)cTypeTypeCrossReference_1_0.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommercialAtKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cVariantAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cVariantINTTerminalRuleCall_3_1_0 = (RuleCall)cVariantAssignment_3_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cParamsAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cParamsParameterParserRuleCall_5_0_0 = (RuleCall)cParamsAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cParamsAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cParamsParameterParserRuleCall_5_1_1_0 = (RuleCall)cParamsAssignment_5_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cBodyAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cBodyStatementParserRuleCall_8_0 = (RuleCall)cBodyAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Method:
		//	bt=BT? type=[Type] name=ID ("@" variant=INT)? "(" (params+=Parameter ("," params+=Parameter)*)? ")" "{"
		//	body+=Statement* "}";
		public ParserRule getRule() { return rule; }

		//bt=BT? type=[Type] name=ID ("@" variant=INT)? "(" (params+=Parameter ("," params+=Parameter)*)? ")" "{" body+=Statement*
		//"}"
		public Group getGroup() { return cGroup; }

		//bt=BT?
		public Assignment getBtAssignment_0() { return cBtAssignment_0; }

		//BT
		public RuleCall getBtBTParserRuleCall_0_0() { return cBtBTParserRuleCall_0_0; }

		//type=[Type]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//[Type]
		public CrossReference getTypeTypeCrossReference_1_0() { return cTypeTypeCrossReference_1_0; }

		//ID
		public RuleCall getTypeTypeIDTerminalRuleCall_1_0_1() { return cTypeTypeIDTerminalRuleCall_1_0_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//("@" variant=INT)?
		public Group getGroup_3() { return cGroup_3; }

		//"@"
		public Keyword getCommercialAtKeyword_3_0() { return cCommercialAtKeyword_3_0; }

		//variant=INT
		public Assignment getVariantAssignment_3_1() { return cVariantAssignment_3_1; }

		//INT
		public RuleCall getVariantINTTerminalRuleCall_3_1_0() { return cVariantINTTerminalRuleCall_3_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }

		//(params+=Parameter ("," params+=Parameter)*)?
		public Group getGroup_5() { return cGroup_5; }

		//params+=Parameter
		public Assignment getParamsAssignment_5_0() { return cParamsAssignment_5_0; }

		//Parameter
		public RuleCall getParamsParameterParserRuleCall_5_0_0() { return cParamsParameterParserRuleCall_5_0_0; }

		//("," params+=Parameter)*
		public Group getGroup_5_1() { return cGroup_5_1; }

		//","
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }

		//params+=Parameter
		public Assignment getParamsAssignment_5_1_1() { return cParamsAssignment_5_1_1; }

		//Parameter
		public RuleCall getParamsParameterParserRuleCall_5_1_1_0() { return cParamsParameterParserRuleCall_5_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }

		//body+=Statement*
		public Assignment getBodyAssignment_8() { return cBodyAssignment_8; }

		//Statement
		public RuleCall getBodyStatementParserRuleCall_8_0() { return cBodyStatementParserRuleCall_8_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBtAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cBtBTParserRuleCall_0_0 = (RuleCall)cBtAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeTypeCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeTypeIDTerminalRuleCall_1_0_1 = (RuleCall)cTypeTypeCrossReference_1_0.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Parameter:
		//	bt=BT? type=[Type] name=ID;
		public ParserRule getRule() { return rule; }

		//bt=BT? type=[Type] name=ID
		public Group getGroup() { return cGroup; }

		//bt=BT?
		public Assignment getBtAssignment_0() { return cBtAssignment_0; }

		//BT
		public RuleCall getBtBTParserRuleCall_0_0() { return cBtBTParserRuleCall_0_0; }

		//type=[Type]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//[Type]
		public CrossReference getTypeTypeCrossReference_1_0() { return cTypeTypeCrossReference_1_0; }

		//ID
		public RuleCall getTypeTypeIDTerminalRuleCall_1_0_1() { return cTypeTypeIDTerminalRuleCall_1_0_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}

	public class ConstructorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constructor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBtAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cBtBTParserRuleCall_0_0 = (RuleCall)cBtAssignment_0.eContents().get(0);
		private final Assignment cClazzAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cClazzClazzCrossReference_1_0 = (CrossReference)cClazzAssignment_1.eContents().get(0);
		private final RuleCall cClazzClazzIDTerminalRuleCall_1_0_1 = (RuleCall)cClazzClazzCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParamsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParamsParameterParserRuleCall_3_0_0 = (RuleCall)cParamsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParamsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParamsParameterParserRuleCall_3_1_1_0 = (RuleCall)cParamsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBodyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBodyStatementParserRuleCall_6_0 = (RuleCall)cBodyAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Constructor:
		//	bt=BT? clazz=[Clazz] "(" (params+=Parameter ("," params+=Parameter)*)? ")" "{" body+=Statement* "}";
		public ParserRule getRule() { return rule; }

		//bt=BT? clazz=[Clazz] "(" (params+=Parameter ("," params+=Parameter)*)? ")" "{" body+=Statement* "}"
		public Group getGroup() { return cGroup; }

		//bt=BT?
		public Assignment getBtAssignment_0() { return cBtAssignment_0; }

		//BT
		public RuleCall getBtBTParserRuleCall_0_0() { return cBtBTParserRuleCall_0_0; }

		//clazz=[Clazz]
		public Assignment getClazzAssignment_1() { return cClazzAssignment_1; }

		//[Clazz]
		public CrossReference getClazzClazzCrossReference_1_0() { return cClazzClazzCrossReference_1_0; }

		//ID
		public RuleCall getClazzClazzIDTerminalRuleCall_1_0_1() { return cClazzClazzIDTerminalRuleCall_1_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(params+=Parameter ("," params+=Parameter)*)?
		public Group getGroup_3() { return cGroup_3; }

		//params+=Parameter
		public Assignment getParamsAssignment_3_0() { return cParamsAssignment_3_0; }

		//Parameter
		public RuleCall getParamsParameterParserRuleCall_3_0_0() { return cParamsParameterParserRuleCall_3_0_0; }

		//("," params+=Parameter)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//params+=Parameter
		public Assignment getParamsAssignment_3_1_1() { return cParamsAssignment_3_1_1; }

		//Parameter
		public RuleCall getParamsParameterParserRuleCall_3_1_1_0() { return cParamsParameterParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//body+=Statement*
		public Assignment getBodyAssignment_6() { return cBodyAssignment_6; }

		//Statement
		public RuleCall getBodyStatementParserRuleCall_6_0() { return cBodyStatementParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVarDeclParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLocalAssignParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFieldAssignParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cConditionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cWhileParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cReturnParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cSingleExprParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//Statement:
		//	VarDecl | LocalAssign | FieldAssign | Condition | While | Return | SingleExpr;
		public ParserRule getRule() { return rule; }

		//VarDecl | LocalAssign | FieldAssign | Condition | While | Return | SingleExpr
		public Alternatives getAlternatives() { return cAlternatives; }

		//VarDecl
		public RuleCall getVarDeclParserRuleCall_0() { return cVarDeclParserRuleCall_0; }

		//LocalAssign
		public RuleCall getLocalAssignParserRuleCall_1() { return cLocalAssignParserRuleCall_1; }

		//FieldAssign
		public RuleCall getFieldAssignParserRuleCall_2() { return cFieldAssignParserRuleCall_2; }

		//Condition
		public RuleCall getConditionParserRuleCall_3() { return cConditionParserRuleCall_3; }

		//While
		public RuleCall getWhileParserRuleCall_4() { return cWhileParserRuleCall_4; }

		//Return
		public RuleCall getReturnParserRuleCall_5() { return cReturnParserRuleCall_5; }

		//SingleExpr
		public RuleCall getSingleExprParserRuleCall_6() { return cSingleExprParserRuleCall_6; }
	}

	public class VarDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VarDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBtAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cBtBTParserRuleCall_0_0 = (RuleCall)cBtAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeTypeCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeTypeIDTerminalRuleCall_1_0_1 = (RuleCall)cTypeTypeCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommercialAtKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cVariantAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cVariantINTTerminalRuleCall_2_1_0 = (RuleCall)cVariantAssignment_2_1.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//VarDecl:
		//	bt=BT? type=[Type] ("@" variant=INT)? name=ID ";";
		public ParserRule getRule() { return rule; }

		//bt=BT? type=[Type] ("@" variant=INT)? name=ID ";"
		public Group getGroup() { return cGroup; }

		//bt=BT?
		public Assignment getBtAssignment_0() { return cBtAssignment_0; }

		//BT
		public RuleCall getBtBTParserRuleCall_0_0() { return cBtBTParserRuleCall_0_0; }

		//type=[Type]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//[Type]
		public CrossReference getTypeTypeCrossReference_1_0() { return cTypeTypeCrossReference_1_0; }

		//ID
		public RuleCall getTypeTypeIDTerminalRuleCall_1_0_1() { return cTypeTypeIDTerminalRuleCall_1_0_1; }

		//("@" variant=INT)?
		public Group getGroup_2() { return cGroup_2; }

		//"@"
		public Keyword getCommercialAtKeyword_2_0() { return cCommercialAtKeyword_2_0; }

		//variant=INT
		public Assignment getVariantAssignment_2_1() { return cVariantAssignment_2_1; }

		//INT
		public RuleCall getVariantINTTerminalRuleCall_2_1_0() { return cVariantINTTerminalRuleCall_2_1_0; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class LocalAssignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LocalAssign");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBtAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cBtBTParserRuleCall_0_0 = (RuleCall)cBtAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRhsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRhsExprParserRuleCall_3_0 = (RuleCall)cRhsAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//LocalAssign:
		//	bt=BT? name=ID "=" rhs=Expr ";";
		public ParserRule getRule() { return rule; }

		//bt=BT? name=ID "=" rhs=Expr ";"
		public Group getGroup() { return cGroup; }

		//bt=BT?
		public Assignment getBtAssignment_0() { return cBtAssignment_0; }

		//BT
		public RuleCall getBtBTParserRuleCall_0_0() { return cBtBTParserRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//rhs=Expr
		public Assignment getRhsAssignment_3() { return cRhsAssignment_3; }

		//Expr
		public RuleCall getRhsExprParserRuleCall_3_0() { return cRhsExprParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class FieldAssignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FieldAssign");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cBtAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cBtBTParserRuleCall_0_0_0 = (RuleCall)cBtAssignment_0_0.eContents().get(0);
		private final Assignment cObjectAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cObjectIDTerminalRuleCall_0_1_0 = (RuleCall)cObjectAssignment_0_1.eContents().get(0);
		private final Keyword cFullStopKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cNameAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_0_3_0 = (RuleCall)cNameAssignment_0_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Assignment cRhsAssignment_0_5 = (Assignment)cGroup_0.eContents().get(5);
		private final RuleCall cRhsExprParserRuleCall_0_5_0 = (RuleCall)cRhsAssignment_0_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_6 = (Keyword)cGroup_0.eContents().get(6);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cBtAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cBtBTParserRuleCall_1_0_0 = (RuleCall)cBtAssignment_1_0.eContents().get(0);
		private final Keyword cThisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cFullStopKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cNameAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_1_3_0 = (RuleCall)cNameAssignment_1_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cRhsAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cRhsExprParserRuleCall_1_5_0 = (RuleCall)cRhsAssignment_1_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		
		//FieldAssign:
		//	bt=BT? object=ID "." name=ID "=" rhs=Expr ";" | bt=BT? "this" "." name=ID "=" rhs=Expr ";";
		public ParserRule getRule() { return rule; }

		//bt=BT? object=ID "." name=ID "=" rhs=Expr ";" | bt=BT? "this" "." name=ID "=" rhs=Expr ";"
		public Alternatives getAlternatives() { return cAlternatives; }

		//bt=BT? object=ID "." name=ID "=" rhs=Expr ";"
		public Group getGroup_0() { return cGroup_0; }

		//bt=BT?
		public Assignment getBtAssignment_0_0() { return cBtAssignment_0_0; }

		//BT
		public RuleCall getBtBTParserRuleCall_0_0_0() { return cBtBTParserRuleCall_0_0_0; }

		//object=ID
		public Assignment getObjectAssignment_0_1() { return cObjectAssignment_0_1; }

		//ID
		public RuleCall getObjectIDTerminalRuleCall_0_1_0() { return cObjectIDTerminalRuleCall_0_1_0; }

		//"."
		public Keyword getFullStopKeyword_0_2() { return cFullStopKeyword_0_2; }

		//name=ID
		public Assignment getNameAssignment_0_3() { return cNameAssignment_0_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_3_0() { return cNameIDTerminalRuleCall_0_3_0; }

		//"="
		public Keyword getEqualsSignKeyword_0_4() { return cEqualsSignKeyword_0_4; }

		//rhs=Expr
		public Assignment getRhsAssignment_0_5() { return cRhsAssignment_0_5; }

		//Expr
		public RuleCall getRhsExprParserRuleCall_0_5_0() { return cRhsExprParserRuleCall_0_5_0; }

		//";"
		public Keyword getSemicolonKeyword_0_6() { return cSemicolonKeyword_0_6; }

		//bt=BT? "this" "." name=ID "=" rhs=Expr ";"
		public Group getGroup_1() { return cGroup_1; }

		//bt=BT?
		public Assignment getBtAssignment_1_0() { return cBtAssignment_1_0; }

		//BT
		public RuleCall getBtBTParserRuleCall_1_0_0() { return cBtBTParserRuleCall_1_0_0; }

		//"this"
		public Keyword getThisKeyword_1_1() { return cThisKeyword_1_1; }

		//"."
		public Keyword getFullStopKeyword_1_2() { return cFullStopKeyword_1_2; }

		//name=ID
		public Assignment getNameAssignment_1_3() { return cNameAssignment_1_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_3_0() { return cNameIDTerminalRuleCall_1_3_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_4() { return cEqualsSignKeyword_1_4; }

		//rhs=Expr
		public Assignment getRhsAssignment_1_5() { return cRhsAssignment_1_5; }

		//Expr
		public RuleCall getRhsExprParserRuleCall_1_5_0() { return cRhsExprParserRuleCall_1_5_0; }

		//";"
		public Keyword getSemicolonKeyword_1_6() { return cSemicolonKeyword_1_6; }
	}

	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBtAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cBtBTParserRuleCall_0_0 = (RuleCall)cBtAssignment_0.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCondAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCondExprParserRuleCall_3_0 = (RuleCall)cCondAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cThenBodyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cThenBodyStatementParserRuleCall_6_0 = (RuleCall)cThenBodyAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cElseKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cLeftCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cElseBodyAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cElseBodyStatementParserRuleCall_10_0 = (RuleCall)cElseBodyAssignment_10.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//Condition:
		//	bt=BT? "if" "(" cond=Expr ")" "{" thenBody+=Statement* "}" "else" "{" elseBody+=Statement* "}";
		public ParserRule getRule() { return rule; }

		//bt=BT? "if" "(" cond=Expr ")" "{" thenBody+=Statement* "}" "else" "{" elseBody+=Statement* "}"
		public Group getGroup() { return cGroup; }

		//bt=BT?
		public Assignment getBtAssignment_0() { return cBtAssignment_0; }

		//BT
		public RuleCall getBtBTParserRuleCall_0_0() { return cBtBTParserRuleCall_0_0; }

		//"if"
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//cond=Expr
		public Assignment getCondAssignment_3() { return cCondAssignment_3; }

		//Expr
		public RuleCall getCondExprParserRuleCall_3_0() { return cCondExprParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//thenBody+=Statement*
		public Assignment getThenBodyAssignment_6() { return cThenBodyAssignment_6; }

		//Statement
		public RuleCall getThenBodyStatementParserRuleCall_6_0() { return cThenBodyStatementParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }

		//"else"
		public Keyword getElseKeyword_8() { return cElseKeyword_8; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_9() { return cLeftCurlyBracketKeyword_9; }

		//elseBody+=Statement*
		public Assignment getElseBodyAssignment_10() { return cElseBodyAssignment_10; }

		//Statement
		public RuleCall getElseBodyStatementParserRuleCall_10_0() { return cElseBodyStatementParserRuleCall_10_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}

	public class WhileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "While");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBtAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cBtBTParserRuleCall_0_0 = (RuleCall)cBtAssignment_0.eContents().get(0);
		private final Keyword cWhileKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCondAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCondExprParserRuleCall_3_0 = (RuleCall)cCondAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBodyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBodyStatementParserRuleCall_6_0 = (RuleCall)cBodyAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//While:
		//	bt=BT? "while" "(" cond=Expr ")" "{" body+=Statement* "}";
		public ParserRule getRule() { return rule; }

		//bt=BT? "while" "(" cond=Expr ")" "{" body+=Statement* "}"
		public Group getGroup() { return cGroup; }

		//bt=BT?
		public Assignment getBtAssignment_0() { return cBtAssignment_0; }

		//BT
		public RuleCall getBtBTParserRuleCall_0_0() { return cBtBTParserRuleCall_0_0; }

		//"while"
		public Keyword getWhileKeyword_1() { return cWhileKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//cond=Expr
		public Assignment getCondAssignment_3() { return cCondAssignment_3; }

		//Expr
		public RuleCall getCondExprParserRuleCall_3_0() { return cCondExprParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//body+=Statement*
		public Assignment getBodyAssignment_6() { return cBodyAssignment_6; }

		//Statement
		public RuleCall getBodyStatementParserRuleCall_6_0() { return cBodyStatementParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class ReturnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Return");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBtAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cBtBTParserRuleCall_0_0 = (RuleCall)cBtAssignment_0.eContents().get(0);
		private final Keyword cReturnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpExprParserRuleCall_2_0 = (RuleCall)cExpAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Return:
		//	bt=BT? "return" exp=Expr ";";
		public ParserRule getRule() { return rule; }

		//bt=BT? "return" exp=Expr ";"
		public Group getGroup() { return cGroup; }

		//bt=BT?
		public Assignment getBtAssignment_0() { return cBtAssignment_0; }

		//BT
		public RuleCall getBtBTParserRuleCall_0_0() { return cBtBTParserRuleCall_0_0; }

		//"return"
		public Keyword getReturnKeyword_1() { return cReturnKeyword_1; }

		//exp=Expr
		public Assignment getExpAssignment_2() { return cExpAssignment_2; }

		//Expr
		public RuleCall getExpExprParserRuleCall_2_0() { return cExpExprParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class SingleExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SingleExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cBtAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cBtBTParserRuleCall_0_0_0 = (RuleCall)cBtAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cExpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpExprParserRuleCall_1_0 = (RuleCall)cExpAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//SingleExpr:
		//	(bt=BT ":")? exp=Expr ";";
		public ParserRule getRule() { return rule; }

		//(bt=BT ":")? exp=Expr ";"
		public Group getGroup() { return cGroup; }

		//(bt=BT ":")?
		public Group getGroup_0() { return cGroup_0; }

		//bt=BT
		public Assignment getBtAssignment_0_0() { return cBtAssignment_0_0; }

		//BT
		public RuleCall getBtBTParserRuleCall_0_0_0() { return cBtBTParserRuleCall_0_0_0; }

		//":"
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }

		//exp=Expr
		public Assignment getExpAssignment_1() { return cExpAssignment_1; }

		//Expr
		public RuleCall getExpExprParserRuleCall_1_0() { return cExpExprParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class ExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAnnotatedExprParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cArithExpParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLiftExpParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Expr:
		//	AnnotatedExpr | ArithExp | LiftExp;
		public ParserRule getRule() { return rule; }

		//AnnotatedExpr | ArithExp | LiftExp
		public Alternatives getAlternatives() { return cAlternatives; }

		//AnnotatedExpr
		public RuleCall getAnnotatedExprParserRuleCall_0() { return cAnnotatedExprParserRuleCall_0; }

		//ArithExp
		public RuleCall getArithExpParserRuleCall_1() { return cArithExpParserRuleCall_1; }

		//LiftExp
		public RuleCall getLiftExpParserRuleCall_2() { return cLiftExpParserRuleCall_2; }
	}

	public class LiftExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LiftExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLiftKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpExprParserRuleCall_1_0 = (RuleCall)cExpAssignment_1.eContents().get(0);
		
		//LiftExp:
		//	"lift" exp=Expr;
		public ParserRule getRule() { return rule; }

		//"lift" exp=Expr
		public Group getGroup() { return cGroup; }

		//"lift"
		public Keyword getLiftKeyword_0() { return cLiftKeyword_0; }

		//exp=Expr
		public Assignment getExpAssignment_1() { return cExpAssignment_1; }

		//Expr
		public RuleCall getExpExprParserRuleCall_1_0() { return cExpExprParserRuleCall_1_0; }
	}

	public class AnnotatedExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnnotatedExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cBtAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cBtBTParserRuleCall_0_0_0 = (RuleCall)cBtAssignment_0_0.eContents().get(0);
		private final Assignment cExpAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cExpObjectOpParserRuleCall_0_1_0 = (RuleCall)cExpAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cThisAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cBtAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cBtBTParserRuleCall_1_1_0 = (RuleCall)cBtAssignment_1_1.eContents().get(0);
		private final Keyword cThisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cBtAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cBtBTParserRuleCall_2_0_0 = (RuleCall)cBtAssignment_2_0.eContents().get(0);
		private final Assignment cExpAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExpInstantiationParserRuleCall_2_1_0 = (RuleCall)cExpAssignment_2_1.eContents().get(0);
		
		//AnnotatedExpr:
		//	bt=BT? exp=ObjectOp | {This} bt=BT? "this" | bt=BT? exp=Instantiation;
		public ParserRule getRule() { return rule; }

		//bt=BT? exp=ObjectOp | {This} bt=BT? "this" | bt=BT? exp=Instantiation
		public Alternatives getAlternatives() { return cAlternatives; }

		//bt=BT? exp=ObjectOp
		public Group getGroup_0() { return cGroup_0; }

		//bt=BT?
		public Assignment getBtAssignment_0_0() { return cBtAssignment_0_0; }

		//BT
		public RuleCall getBtBTParserRuleCall_0_0_0() { return cBtBTParserRuleCall_0_0_0; }

		//exp=ObjectOp
		public Assignment getExpAssignment_0_1() { return cExpAssignment_0_1; }

		//ObjectOp
		public RuleCall getExpObjectOpParserRuleCall_0_1_0() { return cExpObjectOpParserRuleCall_0_1_0; }

		//{This} bt=BT? "this"
		public Group getGroup_1() { return cGroup_1; }

		//{This}
		public Action getThisAction_1_0() { return cThisAction_1_0; }

		//bt=BT?
		public Assignment getBtAssignment_1_1() { return cBtAssignment_1_1; }

		//BT
		public RuleCall getBtBTParserRuleCall_1_1_0() { return cBtBTParserRuleCall_1_1_0; }

		//"this"
		public Keyword getThisKeyword_1_2() { return cThisKeyword_1_2; }

		//bt=BT? exp=Instantiation
		public Group getGroup_2() { return cGroup_2; }

		//bt=BT?
		public Assignment getBtAssignment_2_0() { return cBtAssignment_2_0; }

		//BT
		public RuleCall getBtBTParserRuleCall_2_0_0() { return cBtBTParserRuleCall_2_0_0; }

		//exp=Instantiation
		public Assignment getExpAssignment_2_1() { return cExpAssignment_2_1; }

		//Instantiation
		public RuleCall getExpInstantiationParserRuleCall_2_1_0() { return cExpInstantiationParserRuleCall_2_1_0; }
	}

	public class ObjectOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ObjectOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cObjectAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cObjectIDTerminalRuleCall_0_0_0 = (RuleCall)cObjectAssignment_0_0.eContents().get(0);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cQualifierAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final CrossReference cQualifierClazzCrossReference_0_2_1_0 = (CrossReference)cQualifierAssignment_0_2_1.eContents().get(0);
		private final RuleCall cQualifierClazzIDTerminalRuleCall_0_2_1_0_1 = (RuleCall)cQualifierClazzCrossReference_0_2_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2_2 = (Keyword)cGroup_0_2.eContents().get(2);
		private final Assignment cNameAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_0_3_0 = (RuleCall)cNameAssignment_0_3.eContents().get(0);
		private final Group cGroup_0_4 = (Group)cGroup_0.eContents().get(4);
		private final Keyword cCommercialAtKeyword_0_4_0 = (Keyword)cGroup_0_4.eContents().get(0);
		private final Assignment cVariantAssignment_0_4_1 = (Assignment)cGroup_0_4.eContents().get(1);
		private final RuleCall cVariantINTTerminalRuleCall_0_4_1_0 = (RuleCall)cVariantAssignment_0_4_1.eContents().get(0);
		private final Group cGroup_0_5 = (Group)cGroup_0.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_0_5_0 = (Keyword)cGroup_0_5.eContents().get(0);
		private final Action cMethodCallTargetAction_0_5_1 = (Action)cGroup_0_5.eContents().get(1);
		private final Group cGroup_0_5_2 = (Group)cGroup_0_5.eContents().get(2);
		private final Assignment cArgumentAssignment_0_5_2_0 = (Assignment)cGroup_0_5_2.eContents().get(0);
		private final RuleCall cArgumentExprParserRuleCall_0_5_2_0_0 = (RuleCall)cArgumentAssignment_0_5_2_0.eContents().get(0);
		private final Group cGroup_0_5_2_1 = (Group)cGroup_0_5_2.eContents().get(1);
		private final Keyword cCommaKeyword_0_5_2_1_0 = (Keyword)cGroup_0_5_2_1.eContents().get(0);
		private final Assignment cArgumentAssignment_0_5_2_1_1 = (Assignment)cGroup_0_5_2_1.eContents().get(1);
		private final RuleCall cArgumentExprParserRuleCall_0_5_2_1_1_0 = (RuleCall)cArgumentAssignment_0_5_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_5_3 = (Keyword)cGroup_0_5.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cThisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cQualifierAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final CrossReference cQualifierClazzCrossReference_1_2_1_0 = (CrossReference)cQualifierAssignment_1_2_1.eContents().get(0);
		private final RuleCall cQualifierClazzIDTerminalRuleCall_1_2_1_0_1 = (RuleCall)cQualifierClazzCrossReference_1_2_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2_2 = (Keyword)cGroup_1_2.eContents().get(2);
		private final Assignment cNameAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_1_3_0 = (RuleCall)cNameAssignment_1_3.eContents().get(0);
		private final Group cGroup_1_4 = (Group)cGroup_1.eContents().get(4);
		private final Keyword cCommercialAtKeyword_1_4_0 = (Keyword)cGroup_1_4.eContents().get(0);
		private final Assignment cVariantAssignment_1_4_1 = (Assignment)cGroup_1_4.eContents().get(1);
		private final RuleCall cVariantINTTerminalRuleCall_1_4_1_0 = (RuleCall)cVariantAssignment_1_4_1.eContents().get(0);
		private final Group cGroup_1_5 = (Group)cGroup_1.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_1_5_0 = (Keyword)cGroup_1_5.eContents().get(0);
		private final Action cMethodCallTargetAction_1_5_1 = (Action)cGroup_1_5.eContents().get(1);
		private final Group cGroup_1_5_2 = (Group)cGroup_1_5.eContents().get(2);
		private final Assignment cArgumentAssignment_1_5_2_0 = (Assignment)cGroup_1_5_2.eContents().get(0);
		private final RuleCall cArgumentExprParserRuleCall_1_5_2_0_0 = (RuleCall)cArgumentAssignment_1_5_2_0.eContents().get(0);
		private final Group cGroup_1_5_2_1 = (Group)cGroup_1_5_2.eContents().get(1);
		private final Keyword cCommaKeyword_1_5_2_1_0 = (Keyword)cGroup_1_5_2_1.eContents().get(0);
		private final Assignment cArgumentAssignment_1_5_2_1_1 = (Assignment)cGroup_1_5_2_1.eContents().get(1);
		private final RuleCall cArgumentExprParserRuleCall_1_5_2_1_1_0 = (RuleCall)cArgumentAssignment_1_5_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_5_3 = (Keyword)cGroup_1_5.eContents().get(3);
		
		//ObjectOp:
		//	object=ID "." ("(" qualifier=[Clazz] ")")? name=ID ("@" variant=INT)? ("(" {MethodCall.target=current} (argument+=Expr
		//	("," argument+=Expr)*)? ")")? | "this" "." ("(" qualifier=[Clazz] ")")? name=ID ("@" variant=INT)? ("("
		//	{MethodCall.target=current} (argument+=Expr ("," argument+=Expr)*)? ")")?;
		public ParserRule getRule() { return rule; }

		//object=ID "." ("(" qualifier=[Clazz] ")")? name=ID ("@" variant=INT)? ("(" {MethodCall.target=current} (argument+=Expr
		//("," argument+=Expr)*)? ")")? | "this" "." ("(" qualifier=[Clazz] ")")? name=ID ("@" variant=INT)? ("("
		//{MethodCall.target=current} (argument+=Expr ("," argument+=Expr)*)? ")")?
		public Alternatives getAlternatives() { return cAlternatives; }

		//object=ID "." ("(" qualifier=[Clazz] ")")? name=ID ("@" variant=INT)? ("(" {MethodCall.target=current} (argument+=Expr
		//("," argument+=Expr)*)? ")")?
		public Group getGroup_0() { return cGroup_0; }

		//object=ID
		public Assignment getObjectAssignment_0_0() { return cObjectAssignment_0_0; }

		//ID
		public RuleCall getObjectIDTerminalRuleCall_0_0_0() { return cObjectIDTerminalRuleCall_0_0_0; }

		//"."
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }

		//("(" qualifier=[Clazz] ")")?
		public Group getGroup_0_2() { return cGroup_0_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_2_0() { return cLeftParenthesisKeyword_0_2_0; }

		//qualifier=[Clazz]
		public Assignment getQualifierAssignment_0_2_1() { return cQualifierAssignment_0_2_1; }

		//[Clazz]
		public CrossReference getQualifierClazzCrossReference_0_2_1_0() { return cQualifierClazzCrossReference_0_2_1_0; }

		//ID
		public RuleCall getQualifierClazzIDTerminalRuleCall_0_2_1_0_1() { return cQualifierClazzIDTerminalRuleCall_0_2_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_0_2_2() { return cRightParenthesisKeyword_0_2_2; }

		//name=ID
		public Assignment getNameAssignment_0_3() { return cNameAssignment_0_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_3_0() { return cNameIDTerminalRuleCall_0_3_0; }

		//("@" variant=INT)?
		public Group getGroup_0_4() { return cGroup_0_4; }

		//"@"
		public Keyword getCommercialAtKeyword_0_4_0() { return cCommercialAtKeyword_0_4_0; }

		//variant=INT
		public Assignment getVariantAssignment_0_4_1() { return cVariantAssignment_0_4_1; }

		//INT
		public RuleCall getVariantINTTerminalRuleCall_0_4_1_0() { return cVariantINTTerminalRuleCall_0_4_1_0; }

		//(=> "(" {MethodCall.target=current} (argument+=Expr ("," argument+=Expr)*)? ")")?
		public Group getGroup_0_5() { return cGroup_0_5; }

		//=> "("
		public Keyword getLeftParenthesisKeyword_0_5_0() { return cLeftParenthesisKeyword_0_5_0; }

		//{MethodCall.target=current}
		public Action getMethodCallTargetAction_0_5_1() { return cMethodCallTargetAction_0_5_1; }

		//(argument+=Expr ("," argument+=Expr)*)?
		public Group getGroup_0_5_2() { return cGroup_0_5_2; }

		//argument+=Expr
		public Assignment getArgumentAssignment_0_5_2_0() { return cArgumentAssignment_0_5_2_0; }

		//Expr
		public RuleCall getArgumentExprParserRuleCall_0_5_2_0_0() { return cArgumentExprParserRuleCall_0_5_2_0_0; }

		//("," argument+=Expr)*
		public Group getGroup_0_5_2_1() { return cGroup_0_5_2_1; }

		//","
		public Keyword getCommaKeyword_0_5_2_1_0() { return cCommaKeyword_0_5_2_1_0; }

		//argument+=Expr
		public Assignment getArgumentAssignment_0_5_2_1_1() { return cArgumentAssignment_0_5_2_1_1; }

		//Expr
		public RuleCall getArgumentExprParserRuleCall_0_5_2_1_1_0() { return cArgumentExprParserRuleCall_0_5_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_5_3() { return cRightParenthesisKeyword_0_5_3; }

		//"this" "." ("(" qualifier=[Clazz] ")")? name=ID ("@" variant=INT)? ("(" {MethodCall.target=current} (argument+=Expr (","
		//argument+=Expr)*)? ")")?
		public Group getGroup_1() { return cGroup_1; }

		//"this"
		public Keyword getThisKeyword_1_0() { return cThisKeyword_1_0; }

		//"."
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }

		//("(" qualifier=[Clazz] ")")?
		public Group getGroup_1_2() { return cGroup_1_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_2_0() { return cLeftParenthesisKeyword_1_2_0; }

		//qualifier=[Clazz]
		public Assignment getQualifierAssignment_1_2_1() { return cQualifierAssignment_1_2_1; }

		//[Clazz]
		public CrossReference getQualifierClazzCrossReference_1_2_1_0() { return cQualifierClazzCrossReference_1_2_1_0; }

		//ID
		public RuleCall getQualifierClazzIDTerminalRuleCall_1_2_1_0_1() { return cQualifierClazzIDTerminalRuleCall_1_2_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2_2() { return cRightParenthesisKeyword_1_2_2; }

		//name=ID
		public Assignment getNameAssignment_1_3() { return cNameAssignment_1_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_3_0() { return cNameIDTerminalRuleCall_1_3_0; }

		//("@" variant=INT)?
		public Group getGroup_1_4() { return cGroup_1_4; }

		//"@"
		public Keyword getCommercialAtKeyword_1_4_0() { return cCommercialAtKeyword_1_4_0; }

		//variant=INT
		public Assignment getVariantAssignment_1_4_1() { return cVariantAssignment_1_4_1; }

		//INT
		public RuleCall getVariantINTTerminalRuleCall_1_4_1_0() { return cVariantINTTerminalRuleCall_1_4_1_0; }

		//(=> "(" {MethodCall.target=current} (argument+=Expr ("," argument+=Expr)*)? ")")?
		public Group getGroup_1_5() { return cGroup_1_5; }

		//=> "("
		public Keyword getLeftParenthesisKeyword_1_5_0() { return cLeftParenthesisKeyword_1_5_0; }

		//{MethodCall.target=current}
		public Action getMethodCallTargetAction_1_5_1() { return cMethodCallTargetAction_1_5_1; }

		//(argument+=Expr ("," argument+=Expr)*)?
		public Group getGroup_1_5_2() { return cGroup_1_5_2; }

		//argument+=Expr
		public Assignment getArgumentAssignment_1_5_2_0() { return cArgumentAssignment_1_5_2_0; }

		//Expr
		public RuleCall getArgumentExprParserRuleCall_1_5_2_0_0() { return cArgumentExprParserRuleCall_1_5_2_0_0; }

		//("," argument+=Expr)*
		public Group getGroup_1_5_2_1() { return cGroup_1_5_2_1; }

		//","
		public Keyword getCommaKeyword_1_5_2_1_0() { return cCommaKeyword_1_5_2_1_0; }

		//argument+=Expr
		public Assignment getArgumentAssignment_1_5_2_1_1() { return cArgumentAssignment_1_5_2_1_1; }

		//Expr
		public RuleCall getArgumentExprParserRuleCall_1_5_2_1_1_0() { return cArgumentExprParserRuleCall_1_5_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_5_3() { return cRightParenthesisKeyword_1_5_3; }
	}

	public class InstantiationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Instantiation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNewKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeClazzCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeClazzIDTerminalRuleCall_1_0_1 = (RuleCall)cTypeClazzCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommercialAtKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cVariantAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cVariantINTTerminalRuleCall_2_1_0 = (RuleCall)cVariantAssignment_2_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cArgumentAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cArgumentExprParserRuleCall_4_0_0 = (RuleCall)cArgumentAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cArgumentAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cArgumentExprParserRuleCall_4_1_1_0 = (RuleCall)cArgumentAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Instantiation:
		//	"new" type=[Clazz] ("@" variant=INT)? "(" (argument+=Expr ("," argument+=Expr)*)? ")";
		public ParserRule getRule() { return rule; }

		//"new" type=[Clazz] ("@" variant=INT)? "(" (argument+=Expr ("," argument+=Expr)*)? ")"
		public Group getGroup() { return cGroup; }

		//"new"
		public Keyword getNewKeyword_0() { return cNewKeyword_0; }

		//type=[Clazz]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//[Clazz]
		public CrossReference getTypeClazzCrossReference_1_0() { return cTypeClazzCrossReference_1_0; }

		//ID
		public RuleCall getTypeClazzIDTerminalRuleCall_1_0_1() { return cTypeClazzIDTerminalRuleCall_1_0_1; }

		//("@" variant=INT)?
		public Group getGroup_2() { return cGroup_2; }

		//"@"
		public Keyword getCommercialAtKeyword_2_0() { return cCommercialAtKeyword_2_0; }

		//variant=INT
		public Assignment getVariantAssignment_2_1() { return cVariantAssignment_2_1; }

		//INT
		public RuleCall getVariantINTTerminalRuleCall_2_1_0() { return cVariantINTTerminalRuleCall_2_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//(argument+=Expr ("," argument+=Expr)*)?
		public Group getGroup_4() { return cGroup_4; }

		//argument+=Expr
		public Assignment getArgumentAssignment_4_0() { return cArgumentAssignment_4_0; }

		//Expr
		public RuleCall getArgumentExprParserRuleCall_4_0_0() { return cArgumentExprParserRuleCall_4_0_0; }

		//("," argument+=Expr)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//argument+=Expr
		public Assignment getArgumentAssignment_4_1_1() { return cArgumentAssignment_4_1_1; }

		//Expr
		public RuleCall getArgumentExprParserRuleCall_4_1_1_0() { return cArgumentExprParserRuleCall_4_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class ArithExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArithExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBinOpAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cLhsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLhsAdditionParserRuleCall_1_0 = (RuleCall)cLhsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cOpAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Alternatives cOpAlternatives_2_0_0 = (Alternatives)cOpAssignment_2_0.eContents().get(0);
		private final Keyword cOpLessThanSignKeyword_2_0_0_0 = (Keyword)cOpAlternatives_2_0_0.eContents().get(0);
		private final Keyword cOpGreaterThanSignKeyword_2_0_0_1 = (Keyword)cOpAlternatives_2_0_0.eContents().get(1);
		private final Keyword cOpEqualsSignEqualsSignKeyword_2_0_0_2 = (Keyword)cOpAlternatives_2_0_0.eContents().get(2);
		private final Keyword cOpDollarSignLessThanSignKeyword_2_0_0_3 = (Keyword)cOpAlternatives_2_0_0.eContents().get(3);
		private final Keyword cOpQuestionMarkLessThanSignKeyword_2_0_0_4 = (Keyword)cOpAlternatives_2_0_0.eContents().get(4);
		private final Keyword cOpDollarSignGreaterThanSignKeyword_2_0_0_5 = (Keyword)cOpAlternatives_2_0_0.eContents().get(5);
		private final Keyword cOpQuestionMarkGreaterThanSignKeyword_2_0_0_6 = (Keyword)cOpAlternatives_2_0_0.eContents().get(6);
		private final Keyword cOpDollarSignEqualsSignEqualsSignKeyword_2_0_0_7 = (Keyword)cOpAlternatives_2_0_0.eContents().get(7);
		private final Keyword cOpQuestionMarkEqualsSignEqualsSignKeyword_2_0_0_8 = (Keyword)cOpAlternatives_2_0_0.eContents().get(8);
		private final Assignment cRhsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cRhsArithExpParserRuleCall_2_1_0 = (RuleCall)cRhsAssignment_2_1.eContents().get(0);
		
		//ArithExp:
		//	{BinOp} lhs=Addition (op=("<" | ">" | "==" | "$<" | "?<" | "$>" | "?>" | "$==" | "?==") rhs=ArithExp)?;
		public ParserRule getRule() { return rule; }

		//{BinOp} lhs=Addition (op=("<" | ">" | "==" | "$<" | "?<" | "$>" | "?>" | "$==" | "?==") rhs=ArithExp)?
		public Group getGroup() { return cGroup; }

		//{BinOp}
		public Action getBinOpAction_0() { return cBinOpAction_0; }

		//lhs=Addition
		public Assignment getLhsAssignment_1() { return cLhsAssignment_1; }

		//Addition
		public RuleCall getLhsAdditionParserRuleCall_1_0() { return cLhsAdditionParserRuleCall_1_0; }

		//(op=("<" | ">" | "==" | "$<" | "?<" | "$>" | "?>" | "$==" | "?==") rhs=ArithExp)?
		public Group getGroup_2() { return cGroup_2; }

		//op=("<" | ">" | "==" | "$<" | "?<" | "$>" | "?>" | "$==" | "?==")
		public Assignment getOpAssignment_2_0() { return cOpAssignment_2_0; }

		//"<" | ">" | "==" | "$<" | "?<" | "$>" | "?>" | "$==" | "?=="
		public Alternatives getOpAlternatives_2_0_0() { return cOpAlternatives_2_0_0; }

		//"<"
		public Keyword getOpLessThanSignKeyword_2_0_0_0() { return cOpLessThanSignKeyword_2_0_0_0; }

		//">"
		public Keyword getOpGreaterThanSignKeyword_2_0_0_1() { return cOpGreaterThanSignKeyword_2_0_0_1; }

		//"=="
		public Keyword getOpEqualsSignEqualsSignKeyword_2_0_0_2() { return cOpEqualsSignEqualsSignKeyword_2_0_0_2; }

		//"$<"
		public Keyword getOpDollarSignLessThanSignKeyword_2_0_0_3() { return cOpDollarSignLessThanSignKeyword_2_0_0_3; }

		//"?<"
		public Keyword getOpQuestionMarkLessThanSignKeyword_2_0_0_4() { return cOpQuestionMarkLessThanSignKeyword_2_0_0_4; }

		//"$>"
		public Keyword getOpDollarSignGreaterThanSignKeyword_2_0_0_5() { return cOpDollarSignGreaterThanSignKeyword_2_0_0_5; }

		//"?>"
		public Keyword getOpQuestionMarkGreaterThanSignKeyword_2_0_0_6() { return cOpQuestionMarkGreaterThanSignKeyword_2_0_0_6; }

		//"$=="
		public Keyword getOpDollarSignEqualsSignEqualsSignKeyword_2_0_0_7() { return cOpDollarSignEqualsSignEqualsSignKeyword_2_0_0_7; }

		//"?=="
		public Keyword getOpQuestionMarkEqualsSignEqualsSignKeyword_2_0_0_8() { return cOpQuestionMarkEqualsSignEqualsSignKeyword_2_0_0_8; }

		//rhs=ArithExp
		public Assignment getRhsAssignment_2_1() { return cRhsAssignment_2_1; }

		//ArithExp
		public RuleCall getRhsArithExpParserRuleCall_2_1_0() { return cRhsArithExpParserRuleCall_2_1_0; }
	}

	public class AdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Addition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBinOpAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cLhsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLhsMultiplicationParserRuleCall_1_0 = (RuleCall)cLhsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cOpAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Alternatives cOpAlternatives_2_0_0 = (Alternatives)cOpAssignment_2_0.eContents().get(0);
		private final Keyword cOpPlusSignKeyword_2_0_0_0 = (Keyword)cOpAlternatives_2_0_0.eContents().get(0);
		private final Keyword cOpHyphenMinusKeyword_2_0_0_1 = (Keyword)cOpAlternatives_2_0_0.eContents().get(1);
		private final Keyword cOpDollarSignPlusSignKeyword_2_0_0_2 = (Keyword)cOpAlternatives_2_0_0.eContents().get(2);
		private final Keyword cOpQuestionMarkPlusSignKeyword_2_0_0_3 = (Keyword)cOpAlternatives_2_0_0.eContents().get(3);
		private final Keyword cOpDollarSignHyphenMinusKeyword_2_0_0_4 = (Keyword)cOpAlternatives_2_0_0.eContents().get(4);
		private final Keyword cOpQuestionMarkHyphenMinusKeyword_2_0_0_5 = (Keyword)cOpAlternatives_2_0_0.eContents().get(5);
		private final Assignment cRhsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cRhsAdditionParserRuleCall_2_1_0 = (RuleCall)cRhsAssignment_2_1.eContents().get(0);
		
		//Addition:
		//	{BinOp} lhs=Multiplication (op=("+" | "-" | "$+" | "?+" | "$-" | "?-") rhs=Addition)?;
		public ParserRule getRule() { return rule; }

		//{BinOp} lhs=Multiplication (op=("+" | "-" | "$+" | "?+" | "$-" | "?-") rhs=Addition)?
		public Group getGroup() { return cGroup; }

		//{BinOp}
		public Action getBinOpAction_0() { return cBinOpAction_0; }

		//lhs=Multiplication
		public Assignment getLhsAssignment_1() { return cLhsAssignment_1; }

		//Multiplication
		public RuleCall getLhsMultiplicationParserRuleCall_1_0() { return cLhsMultiplicationParserRuleCall_1_0; }

		//(op=("+" | "-" | "$+" | "?+" | "$-" | "?-") rhs=Addition)?
		public Group getGroup_2() { return cGroup_2; }

		//op=("+" | "-" | "$+" | "?+" | "$-" | "?-")
		public Assignment getOpAssignment_2_0() { return cOpAssignment_2_0; }

		//"+" | "-" | "$+" | "?+" | "$-" | "?-"
		public Alternatives getOpAlternatives_2_0_0() { return cOpAlternatives_2_0_0; }

		//"+"
		public Keyword getOpPlusSignKeyword_2_0_0_0() { return cOpPlusSignKeyword_2_0_0_0; }

		//"-"
		public Keyword getOpHyphenMinusKeyword_2_0_0_1() { return cOpHyphenMinusKeyword_2_0_0_1; }

		//"$+"
		public Keyword getOpDollarSignPlusSignKeyword_2_0_0_2() { return cOpDollarSignPlusSignKeyword_2_0_0_2; }

		//"?+"
		public Keyword getOpQuestionMarkPlusSignKeyword_2_0_0_3() { return cOpQuestionMarkPlusSignKeyword_2_0_0_3; }

		//"$-"
		public Keyword getOpDollarSignHyphenMinusKeyword_2_0_0_4() { return cOpDollarSignHyphenMinusKeyword_2_0_0_4; }

		//"?-"
		public Keyword getOpQuestionMarkHyphenMinusKeyword_2_0_0_5() { return cOpQuestionMarkHyphenMinusKeyword_2_0_0_5; }

		//rhs=Addition
		public Assignment getRhsAssignment_2_1() { return cRhsAssignment_2_1; }

		//Addition
		public RuleCall getRhsAdditionParserRuleCall_2_1_0() { return cRhsAdditionParserRuleCall_2_1_0; }
	}

	public class MultiplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Multiplication");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cBinOpAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cLhsAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cLhsBaseExpParserRuleCall_0_1_0 = (RuleCall)cLhsAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Assignment cOpAssignment_0_2_0 = (Assignment)cGroup_0_2.eContents().get(0);
		private final Alternatives cOpAlternatives_0_2_0_0 = (Alternatives)cOpAssignment_0_2_0.eContents().get(0);
		private final Keyword cOpAsteriskKeyword_0_2_0_0_0 = (Keyword)cOpAlternatives_0_2_0_0.eContents().get(0);
		private final Keyword cOpSolidusKeyword_0_2_0_0_1 = (Keyword)cOpAlternatives_0_2_0_0.eContents().get(1);
		private final Keyword cOpDollarSignAsteriskKeyword_0_2_0_0_2 = (Keyword)cOpAlternatives_0_2_0_0.eContents().get(2);
		private final Keyword cOpQuestionMarkAsteriskKeyword_0_2_0_0_3 = (Keyword)cOpAlternatives_0_2_0_0.eContents().get(3);
		private final Keyword cOpDollarSignSolidusKeyword_0_2_0_0_4 = (Keyword)cOpAlternatives_0_2_0_0.eContents().get(4);
		private final Keyword cOpQuestionMarkSolidusKeyword_0_2_0_0_5 = (Keyword)cOpAlternatives_0_2_0_0.eContents().get(5);
		private final Assignment cRhsAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cRhsMultiplicationParserRuleCall_0_2_1_0 = (RuleCall)cRhsAssignment_0_2_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cExprParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//Multiplication:
		//	{BinOp} lhs=BaseExp (op=("*" | "/" | "$*" | "?*" | "$/" | "?/") rhs=Multiplication)? | "(" Expr ")";
		public ParserRule getRule() { return rule; }

		//{BinOp} lhs=BaseExp (op=("*" | "/" | "$*" | "?*" | "$/" | "?/") rhs=Multiplication)? | "(" Expr ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{BinOp} lhs=BaseExp (op=("*" | "/" | "$*" | "?*" | "$/" | "?/") rhs=Multiplication)?
		public Group getGroup_0() { return cGroup_0; }

		//{BinOp}
		public Action getBinOpAction_0_0() { return cBinOpAction_0_0; }

		//lhs=BaseExp
		public Assignment getLhsAssignment_0_1() { return cLhsAssignment_0_1; }

		//BaseExp
		public RuleCall getLhsBaseExpParserRuleCall_0_1_0() { return cLhsBaseExpParserRuleCall_0_1_0; }

		//(op=("*" | "/" | "$*" | "?*" | "$/" | "?/") rhs=Multiplication)?
		public Group getGroup_0_2() { return cGroup_0_2; }

		//op=("*" | "/" | "$*" | "?*" | "$/" | "?/")
		public Assignment getOpAssignment_0_2_0() { return cOpAssignment_0_2_0; }

		//"*" | "/" | "$*" | "?*" | "$/" | "?/"
		public Alternatives getOpAlternatives_0_2_0_0() { return cOpAlternatives_0_2_0_0; }

		//"*"
		public Keyword getOpAsteriskKeyword_0_2_0_0_0() { return cOpAsteriskKeyword_0_2_0_0_0; }

		//"/"
		public Keyword getOpSolidusKeyword_0_2_0_0_1() { return cOpSolidusKeyword_0_2_0_0_1; }

		//"$*"
		public Keyword getOpDollarSignAsteriskKeyword_0_2_0_0_2() { return cOpDollarSignAsteriskKeyword_0_2_0_0_2; }

		//"?*"
		public Keyword getOpQuestionMarkAsteriskKeyword_0_2_0_0_3() { return cOpQuestionMarkAsteriskKeyword_0_2_0_0_3; }

		//"$/"
		public Keyword getOpDollarSignSolidusKeyword_0_2_0_0_4() { return cOpDollarSignSolidusKeyword_0_2_0_0_4; }

		//"?/"
		public Keyword getOpQuestionMarkSolidusKeyword_0_2_0_0_5() { return cOpQuestionMarkSolidusKeyword_0_2_0_0_5; }

		//rhs=Multiplication
		public Assignment getRhsAssignment_0_2_1() { return cRhsAssignment_0_2_1; }

		//Multiplication
		public RuleCall getRhsMultiplicationParserRuleCall_0_2_1_0() { return cRhsMultiplicationParserRuleCall_0_2_1_0; }

		//"(" Expr ")"
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//Expr
		public RuleCall getExprParserRuleCall_1_1() { return cExprParserRuleCall_1_1; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}

	public class BaseExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BaseExp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVarRefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConstantParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDynamicValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//BaseExp:
		//	VarRef | Constant | DynamicValue;
		public ParserRule getRule() { return rule; }

		//VarRef | Constant | DynamicValue
		public Alternatives getAlternatives() { return cAlternatives; }

		//VarRef
		public RuleCall getVarRefParserRuleCall_0() { return cVarRefParserRuleCall_0; }

		//Constant
		public RuleCall getConstantParserRuleCall_1() { return cConstantParserRuleCall_1; }

		//DynamicValue
		public RuleCall getDynamicValueParserRuleCall_2() { return cDynamicValueParserRuleCall_2; }
	}

	public class VarRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VarRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBtAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cBtBTParserRuleCall_0_0 = (RuleCall)cBtAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//VarRef:
		//	bt=BT? name=ID;
		public ParserRule getRule() { return rule; }

		//bt=BT? name=ID
		public Group getGroup() { return cGroup; }

		//bt=BT?
		public Assignment getBtAssignment_0() { return cBtAssignment_0; }

		//BT
		public RuleCall getBtBTParserRuleCall_0_0() { return cBtBTParserRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constant");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//Constant:
		//	value=INT;
		public ParserRule getRule() { return rule; }

		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}

	public class DynamicValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DynamicValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDynamicKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeTypeCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeTypeIDTerminalRuleCall_2_0_1 = (RuleCall)cTypeTypeCrossReference_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//DynamicValue:
		//	"dynamic" "(" type=[Type] "," name=ID ")";
		public ParserRule getRule() { return rule; }

		//"dynamic" "(" type=[Type] "," name=ID ")"
		public Group getGroup() { return cGroup; }

		//"dynamic"
		public Keyword getDynamicKeyword_0() { return cDynamicKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//type=[Type]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//[Type]
		public CrossReference getTypeTypeCrossReference_2_0() { return cTypeTypeCrossReference_2_0; }

		//ID
		public RuleCall getTypeTypeIDTerminalRuleCall_2_0_1() { return cTypeTypeIDTerminalRuleCall_2_0_1; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	
	
	private ProgramElements pProgram;
	private ScenarioElements pScenario;
	private BTElements pBT;
	private TypeElements pType;
	private PrimitiveElements pPrimitive;
	private ClazzElements pClazz;
	private MemberElements pMember;
	private FieldElements pField;
	private MethodElements pMethod;
	private ParameterElements pParameter;
	private ConstructorElements pConstructor;
	private StatementElements pStatement;
	private VarDeclElements pVarDecl;
	private LocalAssignElements pLocalAssign;
	private FieldAssignElements pFieldAssign;
	private ConditionElements pCondition;
	private WhileElements pWhile;
	private ReturnElements pReturn;
	private SingleExprElements pSingleExpr;
	private ExprElements pExpr;
	private LiftExpElements pLiftExp;
	private AnnotatedExprElements pAnnotatedExpr;
	private ObjectOpElements pObjectOp;
	private InstantiationElements pInstantiation;
	private ArithExpElements pArithExp;
	private AdditionElements pAddition;
	private MultiplicationElements pMultiplication;
	private BaseExpElements pBaseExp;
	private VarRefElements pVarRef;
	private ConstantElements pConstant;
	private DynamicValueElements pDynamicValue;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public TJGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("dk.sdu.mmmi.tjep.TJ".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//	"package" pkgname=ID ";" scenarios+=Scenario* types+=Type*;
	public ProgramElements getProgramAccess() {
		return (pProgram != null) ? pProgram : (pProgram = new ProgramElements());
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}

	//Scenario:
	//	"scenario" name=ID "{" target+=Statement* "}" ("assert" "{" assertion+=Statement* "}")?;
	public ScenarioElements getScenarioAccess() {
		return (pScenario != null) ? pScenario : (pScenario = new ScenarioElements());
	}
	
	public ParserRule getScenarioRule() {
		return getScenarioAccess().getRule();
	}

	//BT:
	//	{Static} "$" | {Dynamic} "?";
	public BTElements getBTAccess() {
		return (pBT != null) ? pBT : (pBT = new BTElements());
	}
	
	public ParserRule getBTRule() {
		return getBTAccess().getRule();
	}

	//Type:
	//	Primitive | Clazz;
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//Primitive:
	//	"primitive" name=ID ";";
	public PrimitiveElements getPrimitiveAccess() {
		return (pPrimitive != null) ? pPrimitive : (pPrimitive = new PrimitiveElements());
	}
	
	public ParserRule getPrimitiveRule() {
		return getPrimitiveAccess().getRule();
	}

	//Clazz:
	//	"class" name=ID ("@" variant=INT)? "extends" base=[Clazz] "{" members+=Member* "}";
	public ClazzElements getClazzAccess() {
		return (pClazz != null) ? pClazz : (pClazz = new ClazzElements());
	}
	
	public ParserRule getClazzRule() {
		return getClazzAccess().getRule();
	}

	//Member:
	//	Field | Method | Constructor;
	public MemberElements getMemberAccess() {
		return (pMember != null) ? pMember : (pMember = new MemberElements());
	}
	
	public ParserRule getMemberRule() {
		return getMemberAccess().getRule();
	}

	//Field:
	//	bt=BT? final?="final"? type=[Type] name=ID ";";
	public FieldElements getFieldAccess() {
		return (pField != null) ? pField : (pField = new FieldElements());
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}

	//Method:
	//	bt=BT? type=[Type] name=ID ("@" variant=INT)? "(" (params+=Parameter ("," params+=Parameter)*)? ")" "{"
	//	body+=Statement* "}";
	public MethodElements getMethodAccess() {
		return (pMethod != null) ? pMethod : (pMethod = new MethodElements());
	}
	
	public ParserRule getMethodRule() {
		return getMethodAccess().getRule();
	}

	//Parameter:
	//	bt=BT? type=[Type] name=ID;
	public ParameterElements getParameterAccess() {
		return (pParameter != null) ? pParameter : (pParameter = new ParameterElements());
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//Constructor:
	//	bt=BT? clazz=[Clazz] "(" (params+=Parameter ("," params+=Parameter)*)? ")" "{" body+=Statement* "}";
	public ConstructorElements getConstructorAccess() {
		return (pConstructor != null) ? pConstructor : (pConstructor = new ConstructorElements());
	}
	
	public ParserRule getConstructorRule() {
		return getConstructorAccess().getRule();
	}

	//Statement:
	//	VarDecl | LocalAssign | FieldAssign | Condition | While | Return | SingleExpr;
	public StatementElements getStatementAccess() {
		return (pStatement != null) ? pStatement : (pStatement = new StatementElements());
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//VarDecl:
	//	bt=BT? type=[Type] ("@" variant=INT)? name=ID ";";
	public VarDeclElements getVarDeclAccess() {
		return (pVarDecl != null) ? pVarDecl : (pVarDecl = new VarDeclElements());
	}
	
	public ParserRule getVarDeclRule() {
		return getVarDeclAccess().getRule();
	}

	//LocalAssign:
	//	bt=BT? name=ID "=" rhs=Expr ";";
	public LocalAssignElements getLocalAssignAccess() {
		return (pLocalAssign != null) ? pLocalAssign : (pLocalAssign = new LocalAssignElements());
	}
	
	public ParserRule getLocalAssignRule() {
		return getLocalAssignAccess().getRule();
	}

	//FieldAssign:
	//	bt=BT? object=ID "." name=ID "=" rhs=Expr ";" | bt=BT? "this" "." name=ID "=" rhs=Expr ";";
	public FieldAssignElements getFieldAssignAccess() {
		return (pFieldAssign != null) ? pFieldAssign : (pFieldAssign = new FieldAssignElements());
	}
	
	public ParserRule getFieldAssignRule() {
		return getFieldAssignAccess().getRule();
	}

	//Condition:
	//	bt=BT? "if" "(" cond=Expr ")" "{" thenBody+=Statement* "}" "else" "{" elseBody+=Statement* "}";
	public ConditionElements getConditionAccess() {
		return (pCondition != null) ? pCondition : (pCondition = new ConditionElements());
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}

	//While:
	//	bt=BT? "while" "(" cond=Expr ")" "{" body+=Statement* "}";
	public WhileElements getWhileAccess() {
		return (pWhile != null) ? pWhile : (pWhile = new WhileElements());
	}
	
	public ParserRule getWhileRule() {
		return getWhileAccess().getRule();
	}

	//Return:
	//	bt=BT? "return" exp=Expr ";";
	public ReturnElements getReturnAccess() {
		return (pReturn != null) ? pReturn : (pReturn = new ReturnElements());
	}
	
	public ParserRule getReturnRule() {
		return getReturnAccess().getRule();
	}

	//SingleExpr:
	//	(bt=BT ":")? exp=Expr ";";
	public SingleExprElements getSingleExprAccess() {
		return (pSingleExpr != null) ? pSingleExpr : (pSingleExpr = new SingleExprElements());
	}
	
	public ParserRule getSingleExprRule() {
		return getSingleExprAccess().getRule();
	}

	//Expr:
	//	AnnotatedExpr | ArithExp | LiftExp;
	public ExprElements getExprAccess() {
		return (pExpr != null) ? pExpr : (pExpr = new ExprElements());
	}
	
	public ParserRule getExprRule() {
		return getExprAccess().getRule();
	}

	//LiftExp:
	//	"lift" exp=Expr;
	public LiftExpElements getLiftExpAccess() {
		return (pLiftExp != null) ? pLiftExp : (pLiftExp = new LiftExpElements());
	}
	
	public ParserRule getLiftExpRule() {
		return getLiftExpAccess().getRule();
	}

	//AnnotatedExpr:
	//	bt=BT? exp=ObjectOp | {This} bt=BT? "this" | bt=BT? exp=Instantiation;
	public AnnotatedExprElements getAnnotatedExprAccess() {
		return (pAnnotatedExpr != null) ? pAnnotatedExpr : (pAnnotatedExpr = new AnnotatedExprElements());
	}
	
	public ParserRule getAnnotatedExprRule() {
		return getAnnotatedExprAccess().getRule();
	}

	//ObjectOp:
	//	object=ID "." ("(" qualifier=[Clazz] ")")? name=ID ("@" variant=INT)? ("(" {MethodCall.target=current} (argument+=Expr
	//	("," argument+=Expr)*)? ")")? | "this" "." ("(" qualifier=[Clazz] ")")? name=ID ("@" variant=INT)? ("("
	//	{MethodCall.target=current} (argument+=Expr ("," argument+=Expr)*)? ")")?;
	public ObjectOpElements getObjectOpAccess() {
		return (pObjectOp != null) ? pObjectOp : (pObjectOp = new ObjectOpElements());
	}
	
	public ParserRule getObjectOpRule() {
		return getObjectOpAccess().getRule();
	}

	//Instantiation:
	//	"new" type=[Clazz] ("@" variant=INT)? "(" (argument+=Expr ("," argument+=Expr)*)? ")";
	public InstantiationElements getInstantiationAccess() {
		return (pInstantiation != null) ? pInstantiation : (pInstantiation = new InstantiationElements());
	}
	
	public ParserRule getInstantiationRule() {
		return getInstantiationAccess().getRule();
	}

	//ArithExp:
	//	{BinOp} lhs=Addition (op=("<" | ">" | "==" | "$<" | "?<" | "$>" | "?>" | "$==" | "?==") rhs=ArithExp)?;
	public ArithExpElements getArithExpAccess() {
		return (pArithExp != null) ? pArithExp : (pArithExp = new ArithExpElements());
	}
	
	public ParserRule getArithExpRule() {
		return getArithExpAccess().getRule();
	}

	//Addition:
	//	{BinOp} lhs=Multiplication (op=("+" | "-" | "$+" | "?+" | "$-" | "?-") rhs=Addition)?;
	public AdditionElements getAdditionAccess() {
		return (pAddition != null) ? pAddition : (pAddition = new AdditionElements());
	}
	
	public ParserRule getAdditionRule() {
		return getAdditionAccess().getRule();
	}

	//Multiplication:
	//	{BinOp} lhs=BaseExp (op=("*" | "/" | "$*" | "?*" | "$/" | "?/") rhs=Multiplication)? | "(" Expr ")";
	public MultiplicationElements getMultiplicationAccess() {
		return (pMultiplication != null) ? pMultiplication : (pMultiplication = new MultiplicationElements());
	}
	
	public ParserRule getMultiplicationRule() {
		return getMultiplicationAccess().getRule();
	}

	//BaseExp:
	//	VarRef | Constant | DynamicValue;
	public BaseExpElements getBaseExpAccess() {
		return (pBaseExp != null) ? pBaseExp : (pBaseExp = new BaseExpElements());
	}
	
	public ParserRule getBaseExpRule() {
		return getBaseExpAccess().getRule();
	}

	//VarRef:
	//	bt=BT? name=ID;
	public VarRefElements getVarRefAccess() {
		return (pVarRef != null) ? pVarRef : (pVarRef = new VarRefElements());
	}
	
	public ParserRule getVarRefRule() {
		return getVarRefAccess().getRule();
	}

	//Constant:
	//	value=INT;
	public ConstantElements getConstantAccess() {
		return (pConstant != null) ? pConstant : (pConstant = new ConstantElements());
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}

	//DynamicValue:
	//	"dynamic" "(" type=[Type] "," name=ID ")";
	public DynamicValueElements getDynamicValueAccess() {
		return (pDynamicValue != null) ? pDynamicValue : (pDynamicValue = new DynamicValueElements());
	}
	
	public ParserRule getDynamicValueRule() {
		return getDynamicValueAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
